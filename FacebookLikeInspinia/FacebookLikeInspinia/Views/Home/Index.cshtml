@using FacebookLikeInspinia.ViewModels.Home
@using Microsoft.AspNet.Identity

@model HomeIndexViewModel
<div class="wrapper wrapper-content">
    <div class="row justify-content-md-center animated fadeInRight">
        <div class="col-md-3">
            @Html.Partial("_FollowersAndFriends")
        </div>
        <div class="col-lg-9">
            <div class="social-feed-box">
      
                <div class="social-body">
                    <h3> New Post</h3>
                    <div class="media-body">
                        <textarea class="form-control" placeholder="What are you thinking?" id="new-post-content-textarea"></textarea>
                    </div>
                    <div class="media-body" style="margin-top: 0.5%">
                        <button class="btn btn-primary pull-right" type="button" id="post-btn" data-user-id="@User.Identity.GetUserId()"><i class="fa fa-paper-plane"></i> Post</button>
                    </div>
                </div>
            </div>
            @Html.Partial("_PostsPartial", Model.Posts)
        </div>
    </div>
</div>
@section scripts{
    <script>

        $(function () {
            console.log("realConnection")
            var hub = $.connection.notificationHub;

            hub.client.showConnectedUsers = function (usersCount) {
                console.log("Connected users: " + usersCount);
            }

            var base64ProfilePhoto = '@Model.Base64ProfilePhoto';

            function getParsedPostTemplate(postJsonModel) {

                var postTemplate = `
                                      <div class="social-feed-box" data-post-id="${postJsonModel.PostId}">
                                        <div class="social-avatar">
                                            <a href="/People/Detail?userId=${postJsonModel.UserId}" class="pull-left">
                                                <img alt="image" src="${postJsonModel.Base64ProfileImage}">
                                            </a>
                                            <div class="media-body">
                                                <a href="/People/Detail?userId=${postJsonModel.UserId}">
                                                    ${postJsonModel.UserFullName}
                                                </a>
                                                <small class="text-muted">${postJsonModel.JsonParsedCreatedAt}</small>
                                            </div>
                                        </div>
                                        <div class="social-body">
                                            <p>
                                                ${postJsonModel.Content}
                                            </p>
                                            <div class="btn-group">
                                                <button class="btn btn-white btn-xs like-action" data-like-button-post-id="${postJsonModel.PostId}"  ><i class="fa fa-thumbs-up" ></i><span class="like-action-count"></span> Likes</button>
                                                <button class="btn btn-white btn-xs comment-btn" data-comment-button-post-id="${postJsonModel.PostId}"><i class="fa fa-comments" ></i> Comment</button>
                                            </div>
                                        </div>
                                        <div class="social-footer" style="display:none"><div class="comment-list"></div>
                                    </div>`;

                return postTemplate;
            }

            function getParsedCommentTemplate(commentJsonModel) {
                var commentItemTemplate = `
                                <div class="social-comment" data-comment-id="${commentJsonModel.CommentId}">
                                    <a href="/People/Detail?userId=${commentJsonModel.UserId}" class="pull-left">
                                        <img alt="image" src="${commentJsonModel.Base64ProfileImage}">
                                    </a>
                                    <div class="media-body">
                                        <a href="/People/Detail?userId=${commentJsonModel.UserId}">
                                            ${commentJsonModel.CommentedByFullName}
                                        </a>
                                        ${commentJsonModel.Content}
                                        <br/>
                                        <a class="small text-muted like-action"><i class="fa fa-thumbs-up" data-like-action-comment-id="${commentJsonModel.CommentId}"></i><span class="like-action-count"></span> Like this!</a> -
                                        <small class="text-muted">${commentJsonModel.JsonParsedCreatedAt}</small>
                                    </div>
                                </div>`;

                return commentItemTemplate;
            }

            function getParsedCommentBoxTemplate(postId) {
                var commentBox = `
                            <div class="social-comment">
                                <a href="" class="pull-left">
                                    <img alt="image" src="${base64ProfilePhoto}">
                                </a>
                                <div class="media-body">
                                    <textarea data-textarea-post-id="${postId}" class="form-control input-comment-box-texarea"  placeholder="Write comment..."></textarea>
                                </div>
                            </div>`;

                return commentBox;
            }

            hub.client.showSavedPost = function (postJsonModel) {
                console.log(postJsonModel);
                var template = getParsedPostTemplate(postJsonModel);
                $(template).hide().prependTo("#post-list-container").fadeIn("slow");
            }

            hub.client.showSavedComment = function (commentJsonModel) {
                var parsedTemplate = getParsedCommentTemplate(commentJsonModel);
                var post = $("#post-list-container").find(`[data-post-id='${commentJsonModel.PostId}']`);
                post.find(".social-footer").show();
                var commentList = post.find(".comment-list");
                $(parsedTemplate).hide().appendTo(commentList).fadeIn("slow");
            }

            hub.client.increaseLikeCommentCount = function (likeCommentJsonModel) {
                console.log(likeCommentJsonModel, "response");
                var post = $("#post-list-container").find(`[data-post-id='${likeCommentJsonModel.PostId}']`);
                var commentList = post.find(".comment-list");
                var comment = commentList.find(`[data-comment-id='${likeCommentJsonModel.CommentId}']`)
                var likeElement = comment.find(".like-action");
                
                var currentUserId = "@User.Identity.GetUserId()";
                if (currentUserId === likeCommentJsonModel.LikedByUserId) {
                    $(likeElement).removeClass("text-muted");
                    $(likeElement).addClass("text-success").addClass("no-hover");
                }
                var likeActionCountContainer = $(likeElement).find("span.like-action-count");
                likeActionCountContainer.text(` ${likeCommentJsonModel.LikeCount} `);
            }

            hub.client.increaseLikePostCount = function (likePostJsonModel) {
                console.log(likePostJsonModel, "response");
                var post = $("#post-list-container").find(`[data-post-id='${likePostJsonModel.PostId}']`);
                var likeElement = post.find(".like-action");
                
                var currentUserId = "@User.Identity.GetUserId()";
                if (currentUserId === likePostJsonModel.LikedByUserId) {
                    $(likeElement).removeClass("text-muted");
                    $(likeElement).addClass("text-success").addClass("no-hover");
                }
                var likeActionCountContainer = $(likeElement).find("span.like-action-count");
                likeActionCountContainer.text(` ${likePostJsonModel.LikeCount} `);
            }

            $("#post-btn").on('click',
                function () {
                    var selft = $(this);
                    selft.addClass("disabled");
                    var userId = $(this).attr('data-user-id');
                    var content = $("#new-post-content-textarea").val();
                    var postViewModel = { UserId: userId, BodyContent: content };
                    $.connection.hub.start().done(function () {
                        hub.server.savePost(postViewModel)
                            .done(function () {
                                selft.removeClass("disabled");
                                $("#new-post-content-textarea").val("");
                        }).fail(function (error) {
                            console.log('Invocation failed. Error: ' + error);
                        });
                    });

                });

            $('body').on('click', 'button.comment-btn', function (e) {
                // do something
                $(this).hide();
                var postId = $(this).attr("data-comment-button-post-id");
                var parsedCommentBox = getParsedCommentBoxTemplate(postId);
                var socialFooter = $(e.target).closest(".social-feed-box").find(".social-footer");
                socialFooter.show();
                $(parsedCommentBox).hide().appendTo(socialFooter).fadeIn("slow").find("textarea").focus();
            });

            $('body').on('keypress', 'textarea.input-comment-box-texarea', function (e) {
                if (e.which === 13) {
                    var self = $(this);
                    //Disable textbox to prevent multiple submit
                    $(this).attr("disabled", "disabled");
                    var postId = $(this).attr("data-textarea-post-id");
                    var content = $(this).val();
                    var userId = '@User.Identity.GetUserId()';

                    var commentViewModel = { Content: content, PostId: postId, OwnerId: userId };
                    console.log(commentViewModel);

                    $.connection.hub.start().done(function () {
                        console.log("connection stablished")
                        hub.server.saveComment(commentViewModel)
                            .done(function () {
                                //Enable the textbox again if needed.
                                self.val("");
                                self.removeAttr("disabled");
                            }).fail(function (error) {
                                console.log('Invocation failed. Error: ' + error);
                            });
                    });                 
                }
            });

            $('body').on('click', 'button.like-action', function (e) {
                var userId = '@User.Identity.GetUserId()';
                var postId = $(this).closest(".social-feed-box").attr("data-post-id");
                var likePostViewModel = { UserId: userId, PostId: postId };
                $.connection.hub.start().done(function () {
                    hub.server.likePost(likePostViewModel);
                });

            });

            $('body').on('click', 'a.like-action', function (e) {
                var userId = '@User.Identity.GetUserId()';
                var commentId = $(this).closest(".social-comment").attr("data-comment-id");
                var likeCommentViewModel = { UserId: userId, CommentId: commentId };
                $.connection.hub.start().done(function () {
                    hub.server.likeComment(likeCommentViewModel);
                });
            });

             $.connection.hub.start().done(function () {
                 console.log("Init Connection");
                hub.server.getConnectedUsers()
                    .done(function () {
                        console.log("Init Connection success")

                    }).fail(function (error) {
                        console.log('Invocation failed Init connection. Error: ' + error);
                    });
            });

        });
    </script>
}